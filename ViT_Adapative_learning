# corrected_vit_afogd.py
import os
import numpy as np
import tensorflow as tf
from keras.utils import to_categorical, plot_model
from tensorflow.keras.layers import Dense, Dropout, LayerNormalization, Rescaling
from tensorflow.keras import layers
import tensorflow_addons as tfa
from Sub_Functions.Evaluate import main_est_parameters
import tfimm

# -------------------------------
# Structural attention, CBAM, Transformer pieces (same as yours)
# -------------------------------
class MultiHeadSelfAttention(tf.keras.layers.Layer):
    def __init__(self, embed_dim, num_heads=2):
        super(MultiHeadSelfAttention, self).__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        if embed_dim % num_heads != 0:
            raise ValueError("embed_dim must be divisible by num_heads")
        self.projection_dim = embed_dim // num_heads
        self.query_dense = Dense(embed_dim)
        self.key_dense = Dense(embed_dim)
        self.value_dense = Dense(embed_dim)
        self.combine_heads = Dense(embed_dim)

    def attention(self, query, key, value):
        score = tf.matmul(query, key, transpose_b=True)
        dim_key = tf.cast(tf.shape(key)[-1], tf.float32)
        scaled_score = score / tf.math.sqrt(dim_key)
        weights = tf.nn.softmax(scaled_score, axis=-1)
        output = tf.matmul(weights, value)
        return output, weights

    def separate_heads(self, x, batch_size):
        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.projection_dim))
        return tf.transpose(x, perm=[0, 2, 1, 3])

    def call(self, inputs):
        batch_size = tf.shape(inputs)[0]
        query = self.query_dense(inputs)
        key = self.key_dense(inputs)
        value = self.value_dense(inputs)
        query = self.separate_heads(query, batch_size)
        key = self.separate_heads(key, batch_size)
        value = self.separate_heads(value, batch_size)
        attention, weights = self.attention(query, key, value)
        attention = tf.transpose(attention, perm=[0, 2, 1, 3])
        concat_attention = tf.reshape(attention, (batch_size, -1, self.embed_dim))
        output = self.combine_heads(concat_attention)
        return output


class TransformerBlock(tf.keras.layers.Layer):
    def __init__(self, embed_dim, num_heads, ff_dim, dropout=0.1):
        super(TransformerBlock, self).__init__()
        self.att = MultiHeadSelfAttention(embed_dim, num_heads)
        self.ffn = tf.keras.Sequential([Dense(ff_dim, activation="relu"), Dense(embed_dim)])
        self.layernorm1 = LayerNormalization(epsilon=1e-6)
        self.layernorm2 = LayerNormalization(epsilon=1e-6)
        self.dropout1 = Dropout(dropout)
        self.dropout2 = Dropout(dropout)

    def call(self, inputs, training=False):
        attn_output = self.att(inputs)
        attn_output = self.dropout1(attn_output, training=training)
        out1 = self.layernorm1(inputs + attn_output)
        ffn_output = self.ffn(out1)
        ffn_output = self.dropout2(ffn_output, training=training)
        return self.layernorm2(out1 + ffn_output)


class StructuralAttention(layers.Layer):
    def __init__(self, num_heads, embed_dim, mlp_dim):
        super(StructuralAttention, self).__init__()
        self.num_heads = num_heads
        self.embed_dim = embed_dim
        self.mlp_dim = mlp_dim
        self.layer_norm = layers.LayerNormalization(epsilon=1e-6)
        self.multi_head_attention = layers.MultiHeadAttention(num_heads=self.num_heads, key_dim=self.embed_dim)
        self.dense_1 = layers.Dense(self.mlp_dim, activation='relu')
        self.dense_2 = layers.Dense(self.embed_dim)

    def call(self, inputs, scope=None, training=False):
        x = self.layer_norm(inputs)
        attention_output = self.multi_head_attention(query=x, value=x, key=x)
        attention_output = attention_output + inputs
        x = self.layer_norm(attention_output)
        mlp_output = self.dense_1(x)
        mlp_output = self.dense_2(mlp_output)
        return mlp_output + attention_output


class CBAMBlock(tf.keras.layers.Layer):
    def __init__(self, ratio=8):
        super(CBAMBlock, self).__init__()
        self.ratio = ratio

    def build(self, input_shape):
        self.channel = input_shape[-1]
        self.shared_layer_one = layers.Dense(self.channel // self.ratio, activation='relu',
                                             kernel_initializer='he_normal', use_bias=True, bias_initializer='zeros')
        self.shared_layer_two = layers.Dense(self.channel, kernel_initializer='he_normal', use_bias=True,
                                             bias_initializer='zeros')
        self.spatial_conv = layers.Conv2D(filters=1, kernel_size=7, strides=1, padding='same',
                                          activation='sigmoid', kernel_initializer='he_normal', use_bias=False)

    def call(self, input_feature):
        avg_pool = tf.reduce_mean(input_feature, axis=[1, 2], keepdims=True)
        max_pool = tf.reduce_max(input_feature, axis=[1, 2], keepdims=True)
        avg_out = self.shared_layer_two(self.shared_layer_one(avg_pool))
        max_out = self.shared_layer_two(self.shared_layer_one(max_pool))
        cbam_feature = tf.nn.sigmoid(avg_out + max_out)
        channel_refined_feature = input_feature * cbam_feature
        avg_pool_spatial = tf.reduce_mean(channel_refined_feature, axis=-1, keepdims=True)
        max_pool_spatial = tf.reduce_max(channel_refined_feature, axis=-1, keepdims=True)
        concat = tf.concat([avg_pool_spatial, max_pool_spatial], axis=-1)
        spatial_attention = self.spatial_conv(concat)
        refined_feature = channel_refined_feature * spatial_attention
        return refined_feature


# Fractional transfer blending (same as you had)
def apply_fractional_transfer(new_model, pretrained_model, omega=0.2):
    pretrained_weights = {layer.name: layer.get_weights() for layer in pretrained_model.layers}
    for layer in new_model.layers:
        if layer.name in pretrained_weights:
            new_w = layer.get_weights()
            pre_w = pretrained_weights[layer.name]
            if len(new_w) != len(pre_w):
                continue
            if all(nw.shape == pw.shape for nw, pw in zip(new_w, pre_w)):
                blended = [(1 - omega) * nw + omega * pw for nw, pw in zip(new_w, pre_w)]
                layer.set_weights(blended)


# Vision Transformer model (subclass)
class VisionTransformer(tf.keras.Model):
    def __init__(self, image_size, patch_size, num_layers, num_classes, d_model, num_heads, mlp_dim, channels=3, dropout=0.1):
        super(VisionTransformer, self).__init__()
        self.patch_size = patch_size
        self.d_model = d_model
        self.num_layers = num_layers
        self.rescale = Rescaling(1. / 255)
        self.num_patches = (image_size // patch_size) ** 2
        self.pos_emb = self.add_weight("pos_emb", shape=(1, self.num_patches + 1, d_model))
        self.class_emb = self.add_weight("class_emb", shape=(1, 1, d_model))
        self.patch_proj = Dense(d_model)
        self.structural_attention = StructuralAttention(num_heads=num_heads, embed_dim=d_model, mlp_dim=mlp_dim)
        self.cbam_block = CBAMBlock()
        self.enc_layers = [TransformerBlock(d_model, num_heads, mlp_dim, dropout) for _ in range(num_layers)]
        self.mlp_head = tf.keras.Sequential([Dense(mlp_dim, activation=tfa.activations.gelu), Dropout(dropout), Dense(num_classes)])

    def extract_patches(self, images):
        patches = tf.image.extract_patches(images=images,
                                           sizes=[1, self.patch_size, self.patch_size, 1],
                                           strides=[1, self.patch_size, self.patch_size, 1],
                                           rates=[1, 1, 1, 1],
                                           padding='VALID')
        # flatten patch dims for Dense projection
        batch = tf.shape(patches)[0]
        patches = tf.reshape(patches, [batch, -1, tf.shape(patches)[-1]])
        return patches

    def call(self, x, training=False):
        batch_size = tf.shape(x)[0]
        x = self.rescale(x)
        patches = self.extract_patches(x)                  # shape (batch, num_patches, patch_dim)
        x = self.patch_proj(patches)                       # (batch, num_patches, d_model)
        spatial_dim = int(np.sqrt(self.num_patches))
        x_resh = tf.reshape(x, [batch_size, spatial_dim, spatial_dim, self.d_model])
        x_resh = self.structural_attention(x_resh, scope=None, training=training)
        x_cbam = self.cbam_block(x_resh)
        new_spatial = tf.shape(x_cbam)[1]
        num_patches = new_spatial * new_spatial
        x = tf.reshape(x_cbam, [batch_size, num_patches, self.d_model])
        class_emb = tf.broadcast_to(self.class_emb, [batch_size, 1, self.d_model])
        x = tf.concat([class_emb, x], axis=1)
        x = x + self.pos_emb
        for layer in self.enc_layers:
            x = layer(x, training=training)
        x = self.mlp_head(x[:, 0])
        return x


# -------------------------------
# Training function using AFOGD (per-variable)
# -------------------------------
def Proposed_model_AFOGD(x_train, x_test, y_train, y_test, train_percent, DB,
                         base_epochs=[1, 200, 300, 400, 500], batch_size=8,
                         alpha=1e-3, mu=0.7, delta=1e-6, c1=0.5, c2=1.5, omega=0.2):
    """
    Train VisionTransformer using the per-variable AFOGD update (paper Eq.20).
    This replaces model.fit() and performs manual gradient updates so we can apply
    the fractional multiplier directly.
    """
    input_shape = x_train.shape[1:]
    num_classes = len(np.unique(y_train))
    y_train_cat = to_categorical(y_train, num_classes)
    y_test_cat = to_categorical(y_test, num_classes)

    # instantiate model
    model = VisionTransformer(image_size=224, patch_size=16, num_layers=2, num_classes=num_classes,
                              d_model=32, num_heads=4, mlp_dim=64, channels=input_shape[-1], dropout=0.1)

    # Build model once (so plot_model works)
    dummy = tf.zeros((1,) + input_shape, dtype=tf.float32)
    _ = model(dummy, training=False)

    # load pretrained ViT (if available) and blend using fractional-transfer
    try:
        source_vit = tfimm.create_model("vit_base_patch16_224", pretrained=False, num_classes=None)
        source_vit.load_weights("pretrained_vit_weights/tf_model.h5")
        apply_fractional_transfer(model, source_vit, omega=omega)
        print("Fractional transfer applied (omega=", omega, ")")
    except Exception as e:
        print("Pretrained blend skipped (couldn't load pretrained weights):", e)

    # --- Prepare training dataset ---
    train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train_cat)).shuffle(1024).batch(batch_size)
    test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test_cat)).batch(batch_size)

    # --- Checkpoint directories ---
    Checkpoint_dir = f"Checkpoint/{DB}/TP_{int(train_percent * 100)}"
    os.makedirs(Checkpoint_dir, exist_ok=True)
    metric_path = f"Analysis/Performance_Analysis/{DB}/"
    os.makedirs(metric_path, exist_ok=True)
    os.makedirs("Architectures/", exist_ok=True)
    os.makedirs("Saved_model/", exist_ok=True)

    # --- Resume logic (find latest epoch checkpoint) ---
    prev_epoch = 0
    for ep in reversed(base_epochs):
        ckt_path = os.path.join(Checkpoint_dir, f"model_epoch_{ep}.weights.h5")
        prev_path = os.path.join(Checkpoint_dir, f"prev_weights_epoch_{ep}.npz")
        metrics_path = os.path.join(metric_path, f"metrics_{train_percent}percent_epoch{ep}.npy")
        if os.path.exists(ckt_path) and os.path.exists(metrics_path) and os.path.exists(prev_path):
            print(f"Found checkpoint and prev-weights for epoch {ep}, resuming...")
            model.load_weights(ckt_path)
            # load prev_weights
            loaded = np.load(prev_path)
            prev_weights = [tf.convert_to_tensor(loaded[f"arr_{i}"]) for i in range(len(loaded.files))]
            # convert to tf.identity vars so they behave like tensors
            prev_weights = [tf.identity(w) for w in prev_weights]
            prev_epoch = ep
            break
    else:
        # if no resume, initialize prev_weights as current weights (so first diff = 0)
        prev_weights = [tf.identity(w) for w in model.trainable_variables]

    metrics_all = {}

    # --- Training chunks (same base_epochs logic) ---
    for end_epochs in base_epochs:
        if end_epochs <= prev_epoch:
            continue

        print(f"\nTraining from epoch {prev_epoch + 1} to {end_epochs} (TP={train_percent}%) ...")
        try:
            for epoch in range(prev_epoch, end_epochs):
                print(f"Epoch {epoch+1}/{end_epochs}")
                step = 0
                for x_batch, y_batch in train_dataset:
                    with tf.GradientTape() as tape:
                        logits = model(x_batch, training=True)
                        loss_value = tf.reduce_mean(tf.keras.losses.categorical_crossentropy(y_batch, logits))

                    grads = tape.gradient(loss_value, model.trainable_variables)

                    # --- AFOGD per-variable updates ---
                    new_prev_weights = []
                    for w, g, pw in zip(model.trainable_variables, grads, prev_weights):
                        # compute per-variable euclidean norm between w and previous
                        diff = w - pw
                        norm = tf.norm(diff)                       # ||w - w_prev||
                        frac_term = tf.pow(norm + delta, 1.0 - mu) # (||...|| + delta)^(1-mu)
                        s_k = tf.clip_by_value(frac_term, c1, c2)  # enforce bounds
                        # parameter update (paper Eq.20 simplified with s_k as effective multiplier)
                        w.assign_sub(alpha * g * s_k)
                        new_prev_weights.append(tf.identity(w))

                    prev_weights = new_prev_weights

                    if step % 50 == 0:
                        print(f"  step {step}, loss: {loss_value.numpy():.4f}")
                    step += 1

                # end of epoch -> optional small evaluation can be done here

            # --- after finishing this epoch-chunk, save checkpoint + prev_weights + metrics ---
            ckt_path = os.path.join(Checkpoint_dir, f"model_epoch_{end_epochs}.weights.h5")
            prev_path = os.path.join(Checkpoint_dir, f"prev_weights_epoch_{end_epochs}.npz")
            metrics_file = os.path.join(metric_path, f"metrics_{train_percent}percent_epoch{end_epochs}.npy")

            # plot and save model architecture (one time)
            try:
                plot_model(model, to_file=f"Architectures/model_architecture.png", show_shapes=True, show_layer_names=True)
            except Exception:
                pass

            model.save_weights(ckt_path)
            # save prev_weights as .npz (list of arrays)
            np.savez(prev_path, *[pw.numpy() for pw in prev_weights])
            model.save(f"Saved_model/{DB}_model", save_format="tf")
            print(f"Checkpoint & prev-weights saved at: {ckt_path} , {prev_path}")

            # compute metrics on test set
            preds = model.predict(x_test, verbose=0)
            y_pred2 = np.argmax(preds, axis=1)
            y_test_labels = np.argmax(y_test_cat, axis=1)
            metrics = main_est_parameters(y_test_labels, y_pred2)

            metrics_all[f"epoch_{end_epochs}"] = metrics
            np.save(metrics_file, metrics)
            print(f"Metrics saved at: {metrics_file}")

            prev_epoch = end_epochs

        except KeyboardInterrupt:
            print(f"Training interrupted during epoch chunk {prev_epoch + 1}-{end_epochs}. Not saving checkpoint or metrics.")
            raise

    print(f"\nCompleted training up to epoch {prev_epoch}.")
    return metrics_all


# -------------------------------
# quick smoke test with random data (only for demonstration)
# -------------------------------
if __name__ == "__main__":
    # small random dataset
    x = np.random.rand(100, 224, 224, 5).astype(np.float32)
    y = np.random.randint(0, 3, size=(100,))
    from sklearn.model_selection import train_test_split
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

    metrics = Proposed_model_AFOGD(x_train, x_test, y_train, y_test, train_percent=70, DB="DB1",
                                  base_epochs=[1, 5], batch_size=8,
                                  alpha=1e-3, mu=0.7, delta=1e-6, c1=0.5, c2=1.5, omega=0.2)
    print("Final metrics:", metrics)
